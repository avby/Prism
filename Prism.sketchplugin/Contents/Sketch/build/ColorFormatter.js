// Generated by CoffeeScript 1.12.7

/*
  ColorFormatter:
  Used to transform a color into different color formats
  it also has the logic to display the color formatter dialog and some class methods to transform a MSColor
  to a color Dictionary that can be saved in a layer
 */
var ColorFormatter;

ColorFormatter = (function() {
  ColorFormatter.prototype.FORMATS = [];

  ColorFormatter.prototype.FORMATS_BY_ID = [];

  ColorFormatter.prototype.colorClassifier = new ColorClassifier();

  function ColorFormatter() {

    /*
    **************** FORMATS ****************
      HERE is when you have to do the implementation of the new format you want to add.
     */
    var format, i, len, ref;
    this.FORMATS.push(new HexFormatter());
    this.FORMATS.push(new RGBACSSFormatter());
    this.FORMATS.push(new SASSFormatter());
    this.FORMATS.push(new CLRFormatter());
    this.FORMATS.push(new ColorSetFormatter());
    this.FORMATS.push(new UIColorSwiftFormatter());
    this.FORMATS.push(new UIColorObjCFormatter());
    this.FORMATS.push(new AndroidJavaFormatter());
    this.FORMATS.push(new AndroidXMLFormatter());
    this.FORMATS.push(new JSONFormatter());
    ref = this.FORMATS;
    for (i = 0, len = ref.length; i < len; i++) {
      format = ref[i];
      this.FORMATS_BY_ID[format.id()] = format;
    }
  }


  /*
    Shows the dialog to export the color dictionaries you provide
    returns a response code to know which button the user clicked.
   */

  ColorFormatter.prototype.showDialogWithColorDictionaries = function(colorDictionaries) {
    var accessory, alert, allColorsString, copyButton, formatObj, names, panel, pasteboard, responseCode, savePanel, selection, types;
    names = this.FORMATS.map(function(enc) {
      return enc.name();
    });
    types = this.FORMATS.map(function(enc) {
      return enc.type();
    });
    accessory = NSPopUpButton.alloc().initWithFrame_pullsDown(NSMakeRect(0, 0, 400, 25), false);
    accessory.addItemsWithTitles(names);
    accessory.selectItemAtIndex(0);
    alert = NSAlert.alloc().init();
    alert.setMessageText("Export colors");
    alert.setInformativeText("Select the color format:");
    alert.addButtonWithTitle('Save to file...');
    copyButton = alert.addButtonWithTitle('Copy to clipboard');
    alert.addButtonWithTitle('Cancel');
    alert.setAccessoryView(accessory);
    accessory.setCOSJSTargetFunction((function(_this) {
      return function(sender) {
        var obj, selection;
        selection = accessory.indexOfSelectedItem();
        obj = _this.FORMATS[selection];
        return copyButton.setEnabled(obj.supportClipboard());
      };
    })(this));
    responseCode = alert.runModal();
    selection = accessory.indexOfSelectedItem();
    formatObj = this.FORMATS[selection];
    switch (responseCode) {
      case 1000:
        log("Saving...");
        switch (formatObj.type()) {
          case FormatterBase.EXPORT_TYPE_FILE:
            savePanel = NSSavePanel.savePanel();
            savePanel.setNameFieldStringValue(formatObj.format());
            savePanel.setAllowsOtherFileTypes(true);
            savePanel.setExtensionHidden(false);
            if (savePanel.runModal()) {
              formatObj.exportAsFile(colorDictionaries, savePanel.URL());
            }
            break;
          case FormatterBase.EXPORT_TYPE_FILES:
            panel = NSOpenPanel.openPanel();
            panel.prompt = "Export";
            panel.message = "Choose export directory";
            panel.canChooseFiles = false;
            panel.canChooseDirectories = true;
            panel.allowsMultipleSelection = false;
            panel.canCreateDirectories = true;
            if (panel.runModal()) {
              formatObj.exportAsFile(colorDictionaries, panel.URL());
            }
            break;
          default:
            log("Unknown type");
        }
        break;
      case 1001:
        log("Copying...");
        allColorsString = formatObj.exportAsString(colorDictionaries);
        pasteboard = NSPasteboard.generalPasteboard();
        pasteboard.declareTypes_owner([NSPasteboardTypeString], null);
        pasteboard.setString_forType(allColorsString, NSPasteboardTypeString);
    }
    return responseCode;
  };

  ColorFormatter.prototype.formatColorDictionary_withFormat_commented = function(colorDictionary, format, commented) {
    var formatter;
    formatter = this.FORMATS_BY_ID[format];
    return formatter.formatText(colorDictionary, commented);
  };


  /*
    Takes a MSColor and a name or alias and packs it on a dictionary representation that can be then saved on a layer using the PluginCommand
   */

  ColorFormatter.colorToDictionary = function(color, name) {
    var dictionary;
    return dictionary = {
      name: name,
      hex: color.immutableModelObject().hexValue(),
      red: color.red(),
      blue: color.blue(),
      green: color.green(),
      alpha: color.alpha()
    };
  };


  /*
    Takes a the dictionary representation from above and returns a new MSColor instance
   */

  ColorFormatter.dictionaryToColor = function(dictionary) {
    var color;
    return color = MSColor.colorWithRed_green_blue_alpha(dictionary.red, dictionary.green, dictionary.blue, dictionary.alpha);
  };

  return ColorFormatter;

})();
